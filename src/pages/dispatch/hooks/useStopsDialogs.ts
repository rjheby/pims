
import { useState } from 'react';
import { Customer, DeliveryStop, DeliveryStatus } from '../components/stops/types';

// Update this type to match how it's used in the file
type UseStopsDialogsProps = {
  onAddStop?: (stop: DeliveryStop) => void;
  onUpdateStop?: (index: number, stop: DeliveryStop) => void;
  initialItems?: string;
}

export const useStopsDialogs = ({
  onAddStop,
  onUpdateStop,
  initialItems
}: UseStopsDialogsProps = {}) => {
  // Dialog states
  const [showCustomerDialog, setShowCustomerDialog] = useState(false);
  const [showItemsDialog, setShowItemsDialog] = useState(false);
  const [showNewCustomerForm, setShowNewCustomerForm] = useState(false);
  
  // Current editing data
  const [currentEditingIndex, setCurrentEditingIndex] = useState<number | null>(null);
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
  const [selectedItems, setSelectedItems] = useState<string>(initialItems || '');
  const [selectedPrice, setSelectedPrice] = useState<number>(0);
  
  const openCustomerDialog = (index?: number) => {
    if (typeof index === 'number') {
      setCurrentEditingIndex(index);
    }
    setShowCustomerDialog(true);
  };
  
  const openItemsDialog = (items?: string, price?: number) => {
    if (items) {
      setSelectedItems(items);
    }
    if (typeof price === 'number') {
      setSelectedPrice(price);
    }
    setShowItemsDialog(true);
  };
  
  const handleCustomerSelect = (customer: Customer) => {
    setSelectedCustomer(customer);
    setShowCustomerDialog(false);
    
    // If we're editing an existing stop
    if (typeof currentEditingIndex === 'number' && onUpdateStop) {
      // This will be handled by the parent component using the selectedCustomer
    } 
    // If we're adding a new stop, open the items dialog next
    else {
      setShowItemsDialog(true);
    }
  };
  
  const handleItemsSelected = (itemsString: string, price: number) => {
    setSelectedItems(itemsString);
    setSelectedPrice(price);
    setShowItemsDialog(false);
    
    // If editing an existing stop
    if (typeof currentEditingIndex === 'number' && onUpdateStop) {
      // This will be handled by the parent component
    } 
    // If adding a new stop and we have all the data
    else if (selectedCustomer && onAddStop) {
      const newStop: DeliveryStop = {
        id: '', // Will be generated by the backend or parent component
        stop_number: 1, // Will be set by the parent component
        customer_id: selectedCustomer.id,
        customer_name: selectedCustomer.name,
        customer_address: selectedCustomer.address || '',
        customer_phone: selectedCustomer.phone || '',
        items: itemsString,
        price: price,
        notes: '',
        is_recurring: true,
        status: 'pending' as DeliveryStatus
      };
      
      onAddStop(newStop);
      resetDialogStates();
    }
  };
  
  const handleNewCustomerSubmit = (customer: Customer) => {
    setSelectedCustomer(customer);
    setShowNewCustomerForm(false);
    setShowItemsDialog(true);
  };
  
  const resetDialogStates = () => {
    setShowCustomerDialog(false);
    setShowItemsDialog(false);
    setShowNewCustomerForm(false);
    setCurrentEditingIndex(null);
    setSelectedCustomer(null);
    setSelectedItems(initialItems || '');
    setSelectedPrice(0);
  };
  
  return {
    // Dialog visibility
    showCustomerDialog,
    showItemsDialog,
    showNewCustomerForm,
    
    // Selected data
    selectedCustomer,
    selectedItems,
    selectedPrice,
    currentEditingIndex,
    
    // Dialog actions
    openCustomerDialog,
    openItemsDialog,
    setShowCustomerDialog,
    setShowItemsDialog,
    setShowNewCustomerForm,
    
    // Event handlers
    handleCustomerSelect,
    handleItemsSelected,
    handleNewCustomerSubmit,
    resetDialogStates,
  };
};
