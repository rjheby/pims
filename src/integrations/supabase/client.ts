// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fxifiwzklvnceyhtmvkb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ4aWZpd3prbHZuY2V5aHRtdmtiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxOTc0NjUsImV4cCI6MjA1NTc3MzQ2NX0.uoJqyke36nO5ymtEUBXsjhP5-nJlDq_COpbrHKr6cQQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Only clear specific token if needed, not everything
const clearSpecificAuthState = () => {
  try {
    if (typeof window !== 'undefined') {
      // Remove our custom token only
      localStorage.removeItem('woodbourne-auth-token');
    }
  } catch (error) {
    console.warn("Failed to clean localStorage during initialization", error);
  }
};

// Get session persistence preference (default to true for better user experience)
const shouldPersistSession = () => {
  try {
    if (typeof window !== 'undefined') {
      const preference = localStorage.getItem('woodbourne-keep-signed-in');
      // If preference is explicitly set to false, return false
      // Otherwise default to true (including if preference is not set)
      return preference !== 'false';
    }
  } catch (error) {
    console.warn("Failed to read session preference from localStorage", error);
  }
  return true; // Default to true if we can't read from localStorage
};

// Create client with enhanced configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: shouldPersistSession(),
      storage: localStorage,
      storageKey: 'woodbourne-auth-token',
      detectSessionInUrl: false,
      flowType: 'implicit'
    },
    global: {
      headers: {
        'x-client-info': 'woodbourne-app'
      }
    },
    // Add small delay to all requests to prevent race conditions
    realtime: {
      params: {
        eventsPerSecond: 5 // Limit events rate
      }
    }
  }
);

// Diagnostic helper to log auth errors - helps with debugging
export const checkSupabaseHealth = async () => {
  try {
    // First try a simple anonymous ping without auth to check basic connectivity
    const { error: pingError } = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      method: 'HEAD',
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Content-Type': 'application/json'
      }
    }).then(response => ({ error: !response.ok ? new Error(`Server responded with ${response.status}`) : null }))
      .catch(error => ({ error }));
    
    if (pingError) {
      return {
        isHealthy: false,
        error: `Connection error: ${pingError.message}`
      };
    }
    
    // If basic connection is fine, try a simple query
    const { data, error } = await supabase.from('profiles').select('count', { count: 'exact', head: true });
    
    return {
      isHealthy: !error,
      error: error ? `${error.code}: ${error.message}` : null
    };
  } catch (error) {
    return {
      isHealthy: false,
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

// Automatically check connection on load and log any issues
checkSupabaseHealth().then(health => {
  if (!health.isHealthy) {
    console.warn('Supabase connection issues detected:', health.error);
  } else {
    console.log('Supabase connection healthy');
  }
});
